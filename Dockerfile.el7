ARG AMZN_VERSION=2023
ARG CENTOS_VERSION=7
ARG GOLANG_VERSION=latest
ARG GOMPLATE_VERSION=stable

FROM amazonlinux:${AMZN_VERSION} as amznlinux

WORKDIR /amznsrpms

# Download amznlinux srpms
RUN yum install -y yum-utils \
    && yumdownloader \
        --destdir . \
        --source \
        amazon\* aws\* ec2\*

# Delete source rpms we cannot or do not want to build
### NOTES:
### - amazon-efs-utils 1.x is not needed since 2.x is available
### - aws-cfn-bootstrap requires python-chevron and python3-daemon, which are not available for el7
### - aws-nitro-enclaves-acm requires rust/cargo, which is not available for el7
### - aws-nitro-enclaves-cli requires rust/cargo, which is not available for el7
### - awscli requires python3-toml, which is not available for el7
RUN rm -f \
  amazon-efs-utils-1.* \
  amazon-linux-onprem-* \
  amazon-linux-repo-cdn-* \
  amazon-linux-repo-s3-* \
  amazon-linux-sb-keys-* \
  amazon-rpm-config-* \
  aws-cfn-bootstrap-* \
  aws-nitro-enclaves-acm-* \
  aws-nitro-enclaves-cli-* \
  awscli-* \
  chrony-* \
  system-release-*

FROM hairyhenderson/gomplate:${GOMPLATE_VERSION} as gomplate

FROM golang:${GOLANG_VERSION} as golang

FROM centos:${CENTOS_VERSION} as builder

SHELL ["/bin/bash", "-c"]

ARG EPEL_RELEASE_URL=https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
WORKDIR /root

# Install basic packaging tools
RUN yum install -y \
        rpmdevtools \
        rpmlint

# Install requirements for building amznlinux srpms from epel repos
RUN yum install -y ${EPEL_RELEASE_URL}

# Install requirements for building amznlinux srpms from base repos
RUN yum install -y \
        acpid \
        ant \
        cargo \
        dos2unix \
        git \
        java-1.8.0-openjdk \
        java-1.8.0-openjdk-devel \
        make \
        openssl-devel \
        python2-devel \
        python3 \
        python3-devel \
        pytest \
        rust \
        selinux-policy-devel \
        systemd-rpm-macros

COPY --from=golang /usr/local/go/ /usr/local/go/
COPY --from=golang /go/ /go/

ENV PATH="/go/bin:/usr/local/go/bin:${PATH}"
ENV GOPATH=/go

RUN go version

# Setup the rpmbuild tree
RUN rpmdev-setuptree
WORKDIR /root/rpmbuild

# Get amznlinux srpms into this stage
COPY --from=amznlinux /amznsrpms /root/amznsrpms

# Build all srpms
### Notes:
### - Delete the golang build requirement from the spec files
### - Delete the BuildArch line from the spec files
### - Delete unsupported Recommends from the spec files
### - Delete the %changelog section from the amazon-ec2-net-utils spec file
### - Delete unsupported "or" from amazon-ec2-net-utils spec file
### - Disable debug packages
### - Customize spec file for amazon-cloudwatch-agent so that it builds correctly
### - Customize spec file for amazon-efs-utils so that it builds correctly
### - Customize spec file for aws-kinesis-agent so that it builds correctly
### - Customize spec file for ec2-hibinit-agent so that it builds correctly
### - Customize spec file for ec2-instance-connect so that it builds correctly
### - Customize spec file for ec2-instance-connect-selinux so that it builds correctly
RUN for SRPM in /root/amznsrpms/*.src.rpm ; do \
        pushd SOURCES \
        && rpm2cpio "$SRPM" | cpio -idv \
        && mv *.spec ../SPECS \
        && popd \
        && SPEC=$(find SPECS -name *.spec -type f) \
        && sed -i "/BuildRequires: golang/d" "$SPEC" \
        && sed -i "/BuildArch: .*/d" "$SPEC" \
        && sed -i "/Recommends: .*/d" "$SPEC" \
        && echo "Building $SRPM" \
        && echo "SPEC file is $SPEC" \
        && cat "$SPEC" \
        && if [[ "$SRPM" =~ "ec2-instance-connect-selinux" ]] ; then \
        sed -i "s#%setup .*#cd %{_topdir}/BUILD\ngzip -dc %{_topdir}/SOURCES/%{name}-%{version}.tar.gz | tar --no-same-owner -xvvf -\nls -al\ncd %{_topdir}/BUILD/%{name}-%{version}\nchown -R root.root .\nchmod -R a+rX,g-w,o-w .#" "$SPEC" ; \
        sed -i "s#%build.*#%build\ncd %{_topdir}/BUILD/%{name}-%{version}#" "$SPEC" ; \
        sed -i "s#%install.*#%install\ncd %{_topdir}/BUILD/%{name}-%{version}#" "$SPEC" ; \
        elif [[ "$SRPM" =~ "ec2-instance-connect" ]] ; then \
        sed -i "s#%setup .*#cd %{_topdir}/BUILD\ngzip -dc %{_topdir}/SOURCES/%{name}-%{version}.tar.gz | tar --no-same-owner -xvvf -\nls -al\ncd %{_topdir}/BUILD/%{name}-%{version}\nchown -R root.root .\nchmod -R a+rX,g-w,o-w .#" "$SPEC" ; \
        sed -i "s#%install.*#%install\ncd %{_topdir}/BUILD/%{name}-%{version}#" "$SPEC" ; \
        elif [[ "$SRPM" =~ "aws-kinesis-agent" ]] ; then \
        sed -i "s#%setup .*#cd %{_topdir}/BUILD\ngzip -dc %{_topdir}/SOURCES/%{name}-%{version}.tar.gz | tar --no-same-owner -xvvf -\nls -al\ncd %{_topdir}/BUILD/%{name}\nchown -R root.root .\nchmod -R a+rX,g-w,o-w .\ncp LICENSE.txt NOTICE.txt README.md ..#" "$SPEC" ; \
        sed -i "s#%build.*#%build\ncd %{_topdir}/BUILD/%{name}#" "$SPEC" ; \
        sed -i "s#%install.*#%install\ncd %{_topdir}/BUILD/%{name}#" "$SPEC" ; \
        elif [[ "$SRPM" =~ "amazon-efs-utils" ]] ; then \
        sed -i "s#%setup .*#cd %{_topdir}/BUILD\ngzip -dc %{_topdir}/SOURCES/%{name}.tar.gz | tar --no-same-owner -xvvf -\ncd %{_topdir}/BUILD/%{name}\nchown -R root.root .\nchmod -R a+rX,g-w,o-w .#" "$SPEC" ; \
        elif [[ "$SRPM" =~ "amazon-cloudwatch-agent" ]] ; then \
        sed -i "s#%setup .*#cd %{_topdir}/BUILD\ngzip -dc %{_topdir}/SOURCES/%{name}.tar.gz | tar --no-same-owner -xvvf -\nmkdir %{name}-%{version}\nmv %{name} %{name}-%{version}\ncd %{_topdir}/BUILD/%{name}-%{version}/%{name}\nchown -R root.root .\nchmod -R a+rX,g-w,o-w .#" "$SPEC" ; \
        sed -i "s#%build.*#%build\ncd %{_topdir}/BUILD/%{name}-%{version}#" "$SPEC" ; \
        elif [[ "$SRPM" =~ "amazon-ec2-net-utils" ]] ; then \
        sed -i "/^%changelog$/q" "$SPEC" ; \
        sed -i "s/Requires: (systemd-resolved or systemd < 250)/Requires: systemd-resolved/" "$SPEC" ; \
        elif [[ "$SRPM" =~ "ec2-hibinit-agent" ]] ; then \
        sed -i "s#%setup .*#cd %{_topdir}/BUILD\ngzip -dc %{_topdir}/SOURCES/ec2-hibinit-agent-%{version}.tar.gz | tar --no-same-owner -xvvf -\ncd ec2-hibinit-agent-%{version}\ncd %{_topdir}/BUILD/ec2-hibinit-agent-%{version}\nchown -R root.root .\nchmod -R a+rX,g-w,o-w .\ncp README.md ..#" "$SPEC" ; \
        sed -i "s#%build.*#%build\ncd %{_topdir}/BUILD/ec2-hibinit-agent-%{version}#" "$SPEC" ; \
        sed -i "s#%install.*#%install\ncd %{_topdir}/BUILD/ec2-hibinit-agent-%{version}#" "$SPEC" ; \
        fi \
        && PYTHON=python3 \
        && echo "Using $PYTHON" \
        && rpmbuild -ba --define "__python $PYTHON" --define "debug_package %{nil}" "$SPEC" \
        || exit $? \
        ; rm -rf SPECS/* SOURCES/* BUILD/* ; \
    done

# Template spel-repo packages using gomplate
COPY --from=gomplate /gomplate /bin/gomplate

COPY Dockerfile.tools /root/spel-repo-builder/
COPY package-templates /root/spel-repo-builder/package-templates
COPY LICENSE /root/spel-repo-builder/package-templates/spel-release
COPY LICENSE /root/spel-repo-builder/package-templates/spel-dod-certs
COPY LICENSE /root/spel-repo-builder/package-templates/spel-wcf-certs

ARG SPEL_RELEASE_BASEURL
ARG SPEL_RELEASE_RELEASE

ENV SPEL_RELEASE_VERSION 7
ENV SPEL_RELEASE_BASEURL ${SPEL_RELEASE_BASEURL}
ENV SPEL_RELEASE_RELEASE ${SPEL_RELEASE_RELEASE}

RUN gomplate --input-dir /root/spel-repo-builder/package-templates --output-dir /root/spel-packages

# Build all spel-repo packages
RUN for PKG in $(find /root/spel-packages/* -type d) ; do \
        cp $PKG/*.spec SPECS \
        && cp $PKG/* SOURCES \
        && SPEC=$(find SPECS -name *.spec -type f) \
        && rpmbuild -ba "$SPEC" \
        || exit $? \
        ; rm -rf SPECS/* SOURCES/* BUILD/* ; \
    done

# Get existing repo from build host
COPY .repo/el7 /root/repo

# Create the yum repo
RUN install -Ddm 000755 /root/repo/packages/ \
    && install -Ddm 000755 /root/repo/srpms/ \
    && cp -rlnv RPMS/* /root/repo/packages \
    && cp -rlnv SRPMS/* /root/repo/srpms \
    && rm -rf /root/repo/repodata

# Template the spel-repo for local testing
RUN SPEL_RELEASE_BASEURL=file:///spel-packages/repo/ gomplate --file /root/spel-repo-builder/package-templates/spel-release/spel.repo --out /root/spel.repo \
    && PACKAGES_BUILT=($(find RPMS/ -name *.rpm -type f -printf "%f ")) \
    && echo "${PACKAGES_BUILT[@]%%.rpm}" > /root/packages-built

FROM centos:${CENTOS_VERSION}

ARG EPEL_RELEASE_URL=https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm

COPY --from=builder /root/repo /spel-packages/builder/repo
COPY --from=builder /root/spel.repo /etc/yum.repos.d/
COPY --from=builder /root/packages-built /spel-packages/
COPY package-templates/spel-release/RPM-GPG-KEY-SPEL /etc/pki/rpm-gpg/
WORKDIR /spel-packages

# Some amznlinux rpms have requirements provided by epel
RUN yum install -y ${EPEL_RELEASE_URL}

RUN yum install -y \
        createrepo \
    && yum clean all
